name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Lint and Type Check
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org/'

    # Ensure we are not forcing auth for public registry
    - name: Ensure public npm registry and no auth
      run: |
        echo "registry=https://registry.npmjs.org/" > .npmrc
        npm config set always-auth false
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 120000
        npm cache verify || true

    # Clean slate
    - name: Remove per-package .npmrc files if any
      run: |
        find . -name ".npmrc" -not -path "./.npmrc" -print -delete || true

    - name: Install dependencies (workspace root)
      run: |
        if npm ci --ignore-scripts --no-audit --no-fund; then
          echo "npm ci succeeded"
        else
          echo "npm ci failed; falling back to npm install"
          npm install --ignore-scripts --no-audit --no-fund
        fi

    - name: Run type checking
      run: npm run check

    - name: Run ESLint (if available)
      run: npm run lint --if-present

    - name: Run Prettier check (if available)
      run: npm run format:check --if-present

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org/'

    # Ensure we are not forcing auth for public registry
    - name: Ensure public npm registry and no auth
      run: |
        echo "registry=https://registry.npmjs.org/" > .npmrc
        npm config set always-auth false
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 120000
        npm cache verify || true

    # Clean slate
    - name: Remove per-package .npmrc files if any
      run: |
        find . -name ".npmrc" -not -path "./.npmrc" -print -delete || true

    - name: Install dependencies (workspace root)
      run: |
        if npm ci --ignore-scripts --no-audit --no-fund; then
          echo "npm ci succeeded"
        else
          echo "npm ci failed; falling back to npm install"
          npm install --ignore-scripts --no-audit --no-fund
        fi

    - name: Run tests
      run: npm test --if-present

    - name: Run test coverage (if available)
      run: npm run test:coverage --if-present

  # Build Test
  build:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org/'

    # Ensure we are not forcing auth for public registry
    - name: Ensure public npm registry and no auth
      run: |
        echo "registry=https://registry.npmjs.org/" > .npmrc
        npm config set always-auth false
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 120000
        npm cache verify || true

    # Clean slate
    - name: Remove per-package .npmrc files if any
      run: |
        find . -name ".npmrc" -not -path "./.npmrc" -print -delete || true

    - name: Install dependencies (workspace root)
      run: |
        if npm ci --ignore-scripts --no-audit --no-fund; then
          echo "npm ci succeeded"
        else
          echo "npm ci failed; falling back to npm install"
          npm install --ignore-scripts --no-audit --no-fund
        fi

    - name: Build client
      run: npm -w client run build

    - name: Build server
      run: npm -w server run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          client/dist/
          server/dist/
        retention-days: 1

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: npm audit --audit-level=moderate

  # Dependency Check
  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org/'

    # Ensure we are not forcing auth for public registry
    - name: Ensure public npm registry and no auth
      run: |
        echo "registry=https://registry.npmjs.org/" > .npmrc
        npm config set always-auth false
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 120000
        npm cache verify || true

    # Clean slate
    - name: Remove per-package .npmrc files if any
      run: |
        find . -name ".npmrc" -not -path "./.npmrc" -print -delete || true

    - name: Install dependencies (workspace root)
      run: |
        if npm ci --ignore-scripts --no-audit --no-fund; then
          echo "npm ci succeeded"
        else
          echo "npm ci failed; falling back to npm install"
          npm install --ignore-scripts --no-audit --no-fund
        fi

    - name: Check for outdated dependencies
      run: npm outdated || true

    - name: Check for security vulnerabilities
      run: npm audit --audit-level=high
